/*
 * File: app/view/PanelEstablecimientos.js
 *
 * This file was generated by Sencha Architect version 4.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.2.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.2.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.PanelEstablecimientos', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.panelestablecimientos',

    requires: [
        'MyApp.view.PanelEstablecimientosViewModel',
        'MyApp.view.PanelEstablecimientosViewController',
        'Ext.panel.Tool',
        'Ext.grid.Panel',
        'Ext.view.Table',
        'Ext.grid.column.Number',
        'Ext.form.Panel',
        'Ext.button.Button'
    ],

    controller: 'panelestablecimientos',
    viewModel: {
        type: 'panelestablecimientos'
    },
    itemId: 'gridpanel',
    title: 'Establecimientos',
    titleAlign: 'center',
    defaultListenerScope: true,

    listeners: {
        render: 'onPanelRender',
        activate: 'onGridpanelActivate'
    },
    tools: [
        {
            xtype: 'tool',
            alignTarget: '',
            cls: 'paneltool',
            iconCls: 'x-fa fa-arrow-left',
            listeners: {
                click: 'onToolClick'
            }
        }
    ],
    items: [
        {
            xtype: 'gridpanel',
            itemId: 'grid',
            header: false,
            title: 'Establecimientos',
            store: 'Establecimientos',
            columns: [
                {
                    xtype: 'gridcolumn',
                    hidden: true,
                    dataIndex: 'estado_registro',
                    text: 'Estado Registro'
                },
                {
                    xtype: 'numbercolumn',
                    hidden: true,
                    dataIndex: 'id',
                    text: 'ID'
                },
                {
                    xtype: 'numbercolumn',
                    hidden: true,
                    dataIndex: 'uid',
                    text: 'Uid',
                    format: '00'
                },
                {
                    xtype: 'gridcolumn',
                    width: '50%',
                    dataIndex: 'nombre',
                    text: 'Nombre'
                },
                {
                    xtype: 'numbercolumn',
                    width: '50%',
                    dataIndex: 'codigo',
                    text: 'Codigo',
                    format: '00'
                },
                {
                    xtype: 'numbercolumn',
                    hidden: true,
                    dataIndex: 'zoom',
                    text: 'Zoom',
                    format: '00'
                },
                {
                    xtype: 'numbercolumn',
                    hidden: true,
                    dataIndex: 'latitud',
                    text: 'Latitud'
                },
                {
                    xtype: 'numbercolumn',
                    hidden: true,
                    dataIndex: 'longitud',
                    text: 'Longitud'
                }
            ],
            listeners: {
                selectionchange: 'onGridSelectionChange',
                itemlongpress: 'onGridItemLongpress',
                itemclick: 'onGridItemClick'
            }
        }
    ],
    dockedItems: [
        {
            xtype: 'form',
            dock: 'bottom',
            layout: 'column',
            bodyPadding: 10,
            header: false,
            title: 'My Form',
            items: [
                {
                    xtype: 'container',
                    columnWidth: 1,
                    itemId: 'newBox',
                    layout: {
                        type: 'hbox',
                        align: 'stretch',
                        pack: 'center'
                    },
                    items: [
                        {
                            xtype: 'button',
                            handler: function(button, e) {
                                f_crud.form_open(this.up("#gridpanel"),'ADD');
                            },
                            cls: '',
                            iconCls: 'x-fa fa-plus',
                            text: 'Nuevo'
                        }
                    ]
                },
                {
                    xtype: 'container',
                    columnWidth: 0.33,
                    hidden: true,
                    itemId: 'editBox',
                    layout: {
                        type: 'hbox',
                        align: 'stretch',
                        pack: 'center'
                    },
                    items: [
                        {
                            xtype: 'button',
                            handler: function(button, e) {
                                f_crud.form_open(this.up('#gridpanel'),'EDIT');
                            },
                            cls: '',
                            margin: '0 0 0 10',
                            iconCls: 'x-fa fa-pencil',
                            text: 'Editar'
                        }
                    ]
                },
                {
                    xtype: 'container',
                    columnWidth: 0.33,
                    hidden: true,
                    itemId: 'deleteBox',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'button',
                            handler: function(button, e) {
                                var gridPanel = this.up('#gridpanel');
                                var query = "select * from Lotes where cod_establecimiento=" + gridPanel.record.data.codigo;
                                f_crud.sql_select(query, function(resultSet){
                                    if(resultSet === -1 || !Array.isArray(resultSet)) {
                                        console.log("Query statement: " + query);
                                        throw "Database error: Check your sql statement or your WebSql instance";
                                    }
                                    else{
                                        if(resultSet.length > 0) {
                                            Ext.Msg.alert({
                                                title: 'Establecimiento no vacio',
                                                message: 'No puede borrar un establecimiento con lotes, <br> borre todos sus lotes primero',
                                                iconCls: 'x-fa fa-warning',
                                                buttons:  Ext.Msg.OK
                                            });
                                        }
                                        else {
                                            f_crud.grid_delete(gridPanel);
                                        }
                                    }
                                });
                            },
                            cls: '',
                            margin: '0 0 0 10',
                            iconCls: 'x-fa fa-trash',
                            text: 'Borrar'
                        }
                    ]
                }
            ]
        }
    ],

    onPanelRender: function(component, eOpts) {
        this.store_name = 'Establecimientos';
        this.model_name = 'MyApp.model.Establecimientos';
        this.form_name  = 'MyApp.view.EstablecimientosForm';
        var store = Ext.getStore(this.store_name);
        this.form_store_array = [store];

        f_crud.load_store(this.store_name);
    },

    onToolClick: function(tool, e, owner, eOpts) {
        var thisPanel = MyApp.main.getLayout().getActiveItem();
        MyApp.main.prevCard = thisPanel;
        MyApp.main.getLayout().prev();
    },

    onGridSelectionChange: function(model, selected, eOpts) {
        this.record = selected[0];
    },

    onGridItemLongpress: function(dataview, record, item, index, e, eOpts) {
        var newbox = this.down("#newBox");
        var editbox = this.down("#editBox");
        var deletebox = this.down("#deleteBox");
        newbox.columnWidth = 0.33;
        newbox.layout.pack = 'end';
        newbox.hide();
        newbox.show();
        editbox.show();
        deletebox.show();
        this.longpress = true;
    },

    onGridItemClick: function(dataview, record, item, index, e, eOpts) {
        if(!this.longpress) {
            var panelClass = "MyApp.view.PanelLotes";
            var newPan = Ext.create(panelClass);
            newPan.est_code = record.data.codigo;
            newPan.est_nombre = record.data.nombre;
            MyApp.main.add(newPan);
            MyApp.main.getLayout().setActiveItem(newPan);
            //MyApp.main.getLayout().next();
        }
        this.longpress = false;
    },

    onGridpanelActivate: function(component, eOpts) {
        var prevPanel = MyApp.main.prevCard;
        if(prevPanel) {
            prevPanel.close();
            delete MyApp.main.prevCard;
        }
    }

});